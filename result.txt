1. Heap is a binary tree with two added properties.
2. For minheap witch node, the node is less than or equal to both the left child and the  right child. Where maxheap, in which the node is greater than or equal to its children.
3. Maxheap
4. It also refers to the free store of unused memory.
5. A binary tree is considered complete if its balanced, meaning that all of the leaves are at level h or h-1, where h is log2n and n is the number of element in the tree, and all of the leaves at level h are on the left side of the tree.

Task 1 
1. First, it check if the object is comparable or not. If not its going to throw non   complete element object. Then it check that if the count == tree.length which is the length is 50. If yes, its going to expand the capacity of the array and make it bigger.  If not, then its going to add the object to the count element in the array. And then check if count == 1 or not, if yes then its going to make sure that the array binary tree is complete.
2.     1
      / \
     3   2
    / \ / \
   5  6 7 10
3.     1
      / \
     3   2
    / \ / \
   4  6 7 10
  /
 5

 Task 2
  javac *.java
Note: ArrayHeapTester.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
 java ArrayHeapTester
test insert()
expect: 1 3 2 5 6 7 10
got:    1 3 2 5 6 7 10 
test remove()
expect: 2 3 7 5 6 10
got:    2 3 7 5 6 10 
test remove()
expect: 3 5 7 10 6
got:    3 5 7 10 6 
test remove()
expect: 5 6 7 10
got:    5 6 7 10 
test remove()
expect: 6 10 7
got:    6 10 7 
test remove()
expect: 7 10
got:    7 10 
test remove()
expect: 10
got:    10 
test remove()
expect:
got:
 
